# -*- coding: utf-8 -*-
"""CIE-3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YFZeYEgphyPr1LPjyxWI0FHbmNfYr8vS
"""

import pandas as pd
df = pd.read_csv('/content/housing.csv')
df.head()
df1=df[['CRIM','ZN','INDUS','CHAS','NOX','RM','AGE']]
df1.head()

x=df1.drop('CRIM',axis=1)
y=df1['CRIM']
print("shape of x=",x.shape)
print("shape of y=",y.shape)
shape of x= (545,4)
shape of y= (545,)
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.3,random_state=54)
print('Shape of X_train',x_train.shape)
print('Shape of X_test',x_test.shape)
print('Shape of y_train',y_train.shape)
print('Shape of y_test',y_test.shape)
Shape of X_train (381,4)
Shape of X_test (164, 4)
Shape of y_train (381,)
Shape of y_test (164,)

from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score

# 1. Gather the Data
iris = load_iris()
X = iris.data  # Features
y = iris.target  # Target variable (species)

# 2. No need to analyze the Iris dataset; it's a well-known dataset.

# 3. Create the Decision Tree Model
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = DecisionTreeClassifier()
model.fit(X_train, y_train)

# 4. Make Predictions and Check Accuracy
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)

print("Accuracy:", accuracy)

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# 1. Gather the Data
data = pd.read_csv("")

# 2. Analyze the Data
print(data.head())
print(data.isnull().sum())
print(data.describe())

# 3. Create the Linear Regression Model
X = data[['Mileage', 'Age', 'EngineSize']]  # Assigning the actual feature column names
y = data['Price']  # Assigning the actual target column name

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = LinearRegression()

model.fit(X_train, y_train)

# 4. Make Predictions and Evaluate the Model
y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("Mean Squared Error:", mse)
print("R-squared (R2) Score:", r2)

data.columns

